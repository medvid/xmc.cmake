{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    //
    // NOTE for JLink users:
    //
    //    Please create the following setting in your VSCode User Settings or in
    //    your global PATH.  Cortex-Debug needs to find the specific gdb-server
    //    you want to use.
    //
    //       Windows     : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServerCL"
    //       Linux / Mac : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServer"
    //
    //    User settings are located in:
    //
    //       Windows : %APPDATA%/Code/User/settings.json
    //       Mac     : $HOME/Library/Application Support/Code/User/settings.json
    //       Linux   : $HOME/.config/Code/User/settings.json
    //
    //    You can use the VSCode Settings UI to edit the files mentioned above.
    //
    //    For the JLink configurations in this file, the "device" name comes from
    //    the list found here:
    //       https://www.segger.com/downloads/supported-devices.php
    //
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch XMC1400 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC1404-Q064x0200",
            "preLaunchCommands": [
                // Program via the hex file to get complete coverage
                "exec-file ${command:cmake.launchTargetPath}"
            ],
            "demangle": true,
            // svdFile is optional, it can be very large.
            "svdFile": "",
            "runToMain": true,          // if true, program will halt at main. Not used for a restart
            "preLaunchTask": "Build: Build [Debug]", // Set this to run a task from tasks.json before
                                                     // starting a debug session
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        // When using 'attach', make sure your program is running on the board and that your
        // executable matches the image in the chip exactly, or else strange things can happen
        // with breakpoints, variables, etc.
        {
            "name": "Attach XMC1400 (JLink)",
            "type": "cortex-debug",
            "request": "attach",
            "cwd": "${workspaceRoot}",
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "Cortex-M4",
            "demangle": true,
            // svdFile is optional, it can be very large.
            "svdFile": "",
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        {
            "name": "Erase XMC1400 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            // executable not needed but need some valid file to get the session to start
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC1404-Q064x0200",
            "overrideLaunchCommands": [
                "monitor reset 2",      // Reset via the reset pin
                "monitor flash erase",
                "monitor reset 0",      // Reset both core and the peripherals
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        {
            "name": "Program XMC1400 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            // Program via the hex file to get complete coverage, no need for symbols
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC1404-Q064x0200",
            "overrideLaunchCommands": [
                "monitor reset 2",      // Reset via the reset pin
                "-target-download",
                "monitor reset 0",      // Reset both core and the peripherals
                "monitor go",
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        {
            "name": "Launch XMC4700 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC4700-F144x2048",
            "preLaunchCommands": [
                // Program via the hex file to get complete coverage
                "exec-file ${command:cmake.launchTargetPath}"
            ],
            "demangle": true,
            // svdFile is optional, it can be very large.
            "svdFile": "",
            "runToMain": true,          // if true, program will halt at main. Not used for a restart
            "preLaunchTask": "Build: Build [Debug]", // Set this to run a task from tasks.json before
                                                     // starting a debug session
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        // When using 'attach', make sure your program is running on the board and that your
        // executable matches the image in the chip exactly, or else strange things can happen
        // with breakpoints, variables, etc.
        {
            "name": "Attach XMC4700 (JLink)",
            "type": "cortex-debug",
            "request": "attach",
            "cwd": "${workspaceRoot}",
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "Cortex-M4",
            "demangle": true,
            // svdFile is optional, it can be very large.
            "svdFile": "",
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        {
            "name": "Erase XMC4700 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            // executable not needed but need some valid file to get the session to start
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC4700-F144x2048",
            "overrideLaunchCommands": [
                "monitor reset 2",      // Reset via the reset pin
                "monitor flash erase",
                "monitor reset 0",      // Reset both core and the peripherals
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        },
        {
            "name": "Program XMC4700 (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceRoot}",
            // Program via the hex file to get complete coverage, no need for symbols
            "executable": "${command:cmake.launchTargetPath}",
            "servertype": "jlink",
            "device": "XMC4700-F144x2048",
            "overrideLaunchCommands": [
                "monitor reset 2",      // Reset via the reset pin
                "-target-download",
                "monitor reset 0",      // Reset both core and the peripherals
                "monitor go",
                "quit"
            ],
            "showDevDebugOutput": false // When set to true, displays output of GDB.
                                        // This is helpful when something is not working right
        }
    ]
}
